package wikinet.db.dao.impl;

import org.hibernate.lob.ClobImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests;
import org.testng.annotations.Test;
import wikinet.db.Utils;
import wikinet.db.dao.SynsetDao;
import wikinet.db.dao.WordDao;
import wikinet.db.domain.Synset;
import wikinet.db.domain.Word;
import wikinet.db.model.SynsetType;

import java.util.LinkedList;
import java.util.List;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;

/**
 * @author shyiko
 * @since Feb 28, 2010
 */
@ContextConfiguration(locations = {"classpath:spring-dao-module-test.xml"})
public class SynsetDaoImplTest extends AbstractTransactionalTestNGSpringContextTests {

    @Autowired
    private SynsetDao synsetDao;

    @Autowired
    private WordDao wordDao;

    @Test
    public void testSave() {
        Word word = new Word("word");
        wordDao.save(word);
        Word word2 = new Word("word2");
        wordDao.save(word2);
        Synset synset = new Synset(1L, new ClobImpl("desc"), SynsetType.NOUN);
        synset.addWord(word);
        synset.addWord(word2);
        synsetDao.save(synset);
        Synset foundSynset = synsetDao.findById(synset.getId());
        assertNotNull(foundSynset);
        assertEquals(Utils.getInstance().getStringFromClob(foundSynset.getDescription()), "desc");
        assertEquals(foundSynset.getWords().size(), 2);
        foundSynset.removeWord(word2);
        synsetDao.save(foundSynset);
        Synset foundSynsetAfterWordRemove = synsetDao.findById(foundSynset.getId());
        assertEquals(foundSynsetAfterWordRemove.getWords().size(), 1);
    }

    @Test
    public void testSaveWithIdAutoGenerated() {
        Synset synset = new Synset(new ClobImpl("desc"), SynsetType.NOUN);
        synsetDao.save(synset);
        synset = new Synset(new ClobImpl("desc"), SynsetType.NOUN);
        synsetDao.save(synset);
        assertEquals(synsetDao.findAll().size(), 2);
    }

    @Test
    public void testMultipleSaveWithWordOrderCheck() {
        Word word = new Word("word");
        wordDao.save(word);
        Word word2 = new Word("word2");
        wordDao.save(word2);
        Synset synset = new Synset(1L, new ClobImpl("desc"), SynsetType.NOUN);
        synset.addWord(word);
        synset.addWord(word2);
        synsetDao.save(synset);
        Synset synset2 = new Synset(2L, new ClobImpl("desc"), SynsetType.NOUN);
        List<Word> list = new LinkedList<Word>();
        list.add(word2);
        list.add(word);
        synset2.setWords(list);
        synsetDao.save(synset2);
        assertEquals(synsetDao.findAll().size(), 2);
        synset = synsetDao.findById(synset.getId());
        List<Word> words = synset.getWords();
        assertEquals(words.get(0).getWord(), "word");
        assertEquals(words.get(1).getWord(), "word2");
        synset2 = synsetDao.findById(synset2.getId());
        words = synset2.getWords();
        assertEquals(words.get(0).getWord(), "word2");
        assertEquals(words.get(1).getWord(), "word");
    }

    @Test
    public void testRemove() {
        Word word = new Word("word");
        wordDao.save(word);
        Synset synset = new Synset(1L, new ClobImpl("desc"), SynsetType.NOUN);
        synset.addWord(word);
        synsetDao.save(synset);
        synsetDao.delete(synset);
        assertEquals(synsetDao.findAll().size(), 0);
        assertEquals(wordDao.findAll().size(), 1);
    }

}